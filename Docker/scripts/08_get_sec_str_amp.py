#!/usr/bin/python3
"""
This scirpt is used to get the minimal free energy structure of the amplicons using RNAfold.
The input is the amplicon_folding_input file, generated by the script 07_split_primers.py.
The output is the output_RNAfold_amp_fusionID.txt file.
	METADATA: fusion_ID_primer_ID	DELTA_G	Idexes_with_secundary_structure STRUCTURE
"""
####################################################################################################
####################################  1. Parse arguments  ##########################################
####################################################################################################
import os
import argparse

parser = argparse.ArgumentParser(description='give arguments to main primer_xc script')
parser.add_argument('-i', nargs=1, required=True, help='amplicon_folding_input file')
args = parser.parse_args()
input_file = args.i[0]

####################################################################################################
####################################     2. Minimal free energy   ##################################
####################################################################################################

# read the amplicon file
sequence_file = open(input_file)

# create an output file
fusion_ID = str(input_file).split('_')[3]
fusion_ID = fusion_ID.replace(".txt", "")
output_file = open('output_RNAfold_amp_' + fusion_ID + '.txt', 'a')

# loop the amplicons
for line in sequence_file:

	# get the information for the amplicon
	amplicon_text, fusion_ID, primer_ID, seq = line.split("_")
	seq = seq.rstrip()

	# get the minimal free energy structure
	## change temperature to 60 degrees
	## change salt to 0.05 M
	## change the type of nucleic acid to DNA
	command = "echo \""+ seq +"\" | RNAfold -p --noconv -T 60.0 -P DNA --salt 0.05 --noPS --noDP"
	process = os.popen(command)
	output = process.read()
	process.close()

	# Extract stdout from the command
	arguments = output.split("\n")
	delta_g = arguments[2].split(" ",1)[1]
	delta_g = delta_g.replace("[", "")
	delta_g = delta_g.replace("]", "")
	delta_g = delta_g.strip()
	structure = arguments[3].split(" ")[0]

	# make string from regions to avoid
	str_not_ok = []
	index = 0

	# check the structure
	for sign in structure:
		if sign == '(' or sign == ')':
			str_not_ok.append(index)
		index += 1
	
	# write the amplicon information to the output file
	output_file.write(fusion_ID + '_' + primer_ID +'\t' + str(delta_g) + '\t' + str(str_not_ok) + '\t' + structure + '\n')

# close the output file
output_file.close()




