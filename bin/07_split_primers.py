#!/usr/bin/python3
"""
This script will split the generated output from primer3 into different files:
- general_primer_design_info: contains all general info about the primer design utilised by primer3
- primer_spec_input: contains the primer sequences in a format that can be used by bowtie
	METADATA: fusion_ID_primer_index_FWD_REV, FWD, FWD_qual, REV, REV_qual
- all_primers: contains all primers with their specific information sorted by amplicon size
	METADATA: fusion_ID, primer_index, FWD, REV, FWD_pos, FWD_len, REV_pos, REV_len, PRIMER_LEFT_TM, PRIMER_RIGHT_TM, PRIMER_LEFT_GC_PERCENT, PRIMER_RIGHT_GC_PERCENT, amplicon
- amplicon_folding_input: contains all amplicons that will be used for secondary structure evaluation
	METADATA: > amplicon_fusion_ID_primer_index_amplicon
The input file is the output file from primer3.
"""
####################################################################################################
####################################  1. Parse arguments  ##########################################
####################################################################################################
import argparse

parser = argparse.ArgumentParser(description='give arguments to the split_primers script')
parser.add_argument('-i', nargs=1, required=True, help='input primer file generated by primer3')
args = parser.parse_args()
input_primers = args.i[0]

####################################################################################################
#################################  2. Create info dictionary  ######################################
####################################################################################################
primer_in = open(input_primers)

primers = {}

fusion_info_keys = ("SEQUENCE_ID", "SEQUENCE_TEMPLATE", "SEQUENCE_TARGET")

# read all info into dictionary
for line in primer_in:
	key, value = line.split("=")
	value = value.rstrip()
	primers[key] = value

template = primers["SEQUENCE_TEMPLATE"]
fusion_ID = primers["SEQUENCE_ID"].split("_")[0]
nr_p_out = primers["PRIMER_LEFT_NUM_RETURNED"]

primer_in.close()


####################################################################################################
####################################   3. generate files  ##########################################
####################################################################################################

# A. General info file
## create general info file
general_info = open("general_primer_design_info_" + fusion_ID + ".txt", "a")
## write general info
for info in primers:
	if "_NUM_" in info or "_EXPLAIN" in info or any(x in info for x in fusion_info_keys):
		general_info.write(info + '=' + str(primers[info]) +'\n')
## close genral info file
general_info.close()

# B. primer_spec_input file
## make file for bowtie
primer_file = open("primer_spec_input_" + fusion_ID + ".txt", "a")

# C. make general file with list primers
all_primers = open("all_primers_" + fusion_ID + ".txt", 'w')
# D. make file for secondary structure evaluation
all_amplicon = open("amplicon_folding_input_" + fusion_ID + ".txt", 'w')


# create a dictionary to store all primers and their info
all_primers_dict = {}

####################################################################################################
####################################   4. write the files  #########################################
####################################################################################################

# loop all primers by index
for primer_index in range(int(nr_p_out)):

	# get primer info per primer
	FWD = primers[("PRIMER_LEFT_" + str(primer_index) + "_SEQUENCE")]
	FWD_qual = len(FWD) * "I"
	REV = primers[("PRIMER_RIGHT_" + str(primer_index) + "_SEQUENCE")]
	REV_qual = len(REV) * "I"

	PRIMER_LEFT_TM = primers[("PRIMER_LEFT_" + str(primer_index) + "_TM")]
	PRIMER_RIGHT_TM = primers[("PRIMER_RIGHT_" + str(primer_index) + "_TM")]
	PRIMER_LEFT_GC_PERCENT = primers[("PRIMER_LEFT_" + str(primer_index) + "_GC_PERCENT")]
	PRIMER_RIGHT_GC_PERCENT = primers[("PRIMER_RIGHT_" + str(primer_index) + "_GC_PERCENT")]

	################################   primer_spec_input   ########################################
	## write FWD + REV
	primer_file.write(fusion_ID + "_primer_" + str(primer_index) + "_FWD_REV" + "\t")
	primer_file.write(FWD + "\t" + FWD_qual + "\t" + REV + "\t" + REV_qual + "\n")

	## write  REV + FWD
	primer_file.write(fusion_ID + "_primer_" + str(primer_index) + "_REV_FWD" + "\t")
	primer_file.write(REV + "\t" + REV_qual + "\t" + FWD + "\t" + FWD_qual + "\n")


	## write FWD + FWD
	primer_file.write(fusion_ID + "_primer_" + str(primer_index) + "_FWD_FWD" + "\t")
	primer_file.write(FWD + "\t" + FWD_qual + "\t" + FWD + "\t" + FWD_qual + "\n")

	## write REV + REV
	primer_file.write(fusion_ID + "_primer_" + str(primer_index) + "_REV_REV" + "\t")
	primer_file.write(REV + "\t" + REV_qual + "\t" + REV + "\t" + REV_qual + "\n")

	## get amplicon and make file for secundary structure evaluation
	FWD_pos, FWD_len = primers['PRIMER_LEFT_'+ str(primer_index)].split(",")
	REV_pos, REV_len = primers['PRIMER_RIGHT_'+ str(primer_index)].split(",")
	amplicon = template[int(FWD_pos):int(REV_pos) + 1]

	##############################   amplicon_folding_input   #######################################
	
	## write amplicon to file
	all_amplicon.write("> amplicon_" + fusion_ID + "_primer" + str(primer_index) + "_" + amplicon + "\n")

	##################################   all_primers   ##############################################

	## general primer file (for filtering), first put in dict, will be sorted (see below)
	all_primers_dict[fusion_ID + '\t' + str(primer_index) + '\t' + FWD + '\t' + REV + '\t' + 
	FWD_pos + '\t' + FWD_len + '\t' + REV_pos +'\t' + REV_len + '\t' + PRIMER_LEFT_TM + '\t' + PRIMER_RIGHT_TM + '\t' + 
	PRIMER_LEFT_GC_PERCENT + '\t' + PRIMER_RIGHT_GC_PERCENT + '\t' + amplicon + '\n'] = len(amplicon)


## sort primers according to amp size (smallest is best) and then write to all_amplicon
all_primers_sorted = {k: v for k, v in sorted(all_primers_dict.items(), key=lambda item: item[1])}

for primer in all_primers_sorted:
	all_primers.write(primer)

# close all files
primer_file.close()
all_primers.close()
all_amplicon.close()



